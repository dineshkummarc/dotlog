{"body":"## Minimalist logging library for .NET\r\n\r\nAvailable via Nuget:  \r\nhttps://nuget.org/packages/DotLog/\r\n\r\nThere are a number of good logging options for .NET applications, and if your needs are\r\nsophisticated, they can be indispensable.\r\n\r\nOn the other hand, there are times when a really simple logging library can be useful.\r\nThis library was designed to make it easy to log to the console or to a rolling file.\r\n\r\nIt provides a Common.Logging API adapter, which you can choose to use so that you're\r\nnot boxed in a corner if your need for a more powerful logging framework evolves.\r\n\r\nThis logging framework was designed to provide a balance between the following goals:\r\n  - simple\r\n  - flexible\r\n  - lightweight\r\n  - reasonably fast\r\n  - reasonable defaults\r\n\r\nTo use the provided ConsoleLogger or FileLogger, there is no dependency on any other frameworks,\r\nunless you choose to use the Common.Logging adapter.\r\n\r\nEven without using the Common.Logging adapter, if it ever becomes necessary to use another logging\r\nframework (such as Microsoft Enterprise Logging), a custom adapter can easily be created by\r\nimplementing the ILogger interface.\r\n\r\nThere is no static Log class or static log method. Ideally, applications should create concrete loggers via IOC\r\ncontainers or factories. However, the Common.Logging API does provide a static LogManager class.\r\n\r\nAn example of using an IOC container or a factory class might look like the following:\r\n\r\nvar logger = Container.Resolve<ILogger>();\r\n\r\nor\r\n\r\nvar logger = LogFactory.CreateLogger();\r\n\r\n### Examples of explicitly creating a logger and using it:\r\n\r\n```c#\r\n// create a logger that outputs to the console using default log level (Information)\r\nvar logger = new Logger(Console.WriteLine);\r\n\r\n// alternatively, use the provided ConsoleLogger\r\nvar logger = new ConsoleLogger();\r\n\r\n// specify the log level (this example will write all entries\r\n// from verbose through critical)\r\nvar logger = new ConsoleLogger {LogLevel = LogLevel.Verbose};\r\n\r\n// create a file logger; by default this will create a rolling log file\r\n// that will continue logging to the same file for the life of this logger\r\n// (to support session based logging).\r\nvar logger = new FileLogger();\r\n\r\n// provide a file name template. This example will create logs\r\n// named testlog-001.log, testlog-002.log, etc.\r\nlogger.FileNameTemplate = \"testlog-###.log\"\r\n\r\n// log something\r\nlogger.Log(\"test log message\");\r\n\r\n// the default log level is LogLevel.Verbose, so this does the same thing:\r\nlogger.Log(\"test log message\", LogLevel.Verbose);\r\n\r\n// Specifiy a category when logging (the default is \"General\")\r\nlogger.Log(\"test log message\", LogLevel.Verbose, \"Test Category\");\r\n```\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"DotLog","tagline":"Minimalist logging library for .NET","google":""}